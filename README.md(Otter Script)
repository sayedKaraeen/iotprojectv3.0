#HERE IS A DETAILED EXPLANATION OF OTTER SCRIPT.
# Imports for MQTT
import time
import datetime
import paho.mqtt.client as mqtt
import paho.mqtt.publish as publish

# Imports for sensor
import board
import busio

# Uncomment the correct sensor 
import adafruit_vcnl4010 	# Proximity sensor

 
# Initialize I2C bus and sensor.
i2c = busio.I2C(board.SCL, board.SDA)

# Uncomment your current sensor :)
sensor1 = adafruit_vcnl4010.VCNL4010(i2c)	# Proximity

# Set MQTT broker and topic
broker = "test.mosquitto.org"	# Broker 

pub_topic = "otter"       # send messages to this topic


############### MQTT section ##################

# when connecting to mqtt do this;
def on_connect(client, userdata, flags, rc):
	if rc==0:
		print("Connection established. Code: "+str(rc))
	else:
		print("Connection failed. Code: " + str(rc))
		
def on_publish(client, userdata, mid):
    print("Published: " + str(mid))
	
def on_disconnect(client, userdata, rc):
	if rc != 0:
		print ("Unexpected disonnection. Code: ", str(rc))
	else:
		print("Disconnected. Code: " + str(rc))
	
def on_log(client, userdata, level, buf):		# Message is in buf
    print("MQTT Log: " + str(buf))

	
############### Sensor section ##################	
	
def get_proximity():
	proximity = sensor1.proximity # The higher the value, object closer to sensor
	print('Proximity: {0}'.format(proximity))
	return proximity
	
	
	
# Connect functions for MQTT
client = mqtt.Client()
client.on_connect = on_connect
client.on_disconnect = on_disconnect
client.on_publish = on_publish
client.on_log = on_log

# Connect to MQTT 
print("Attempting to connect to broker " + broker)
client.connect(broker)	# Broker address, port and keepalive (maximum period in seconds allowed between communications with the broker)
client.loop_start()


# Loop that publishes message
while True:
	data_to_send = get_proximity()	# Here, call the correct function from the sensor section depending on sensor
	client.publish(pub_topic, str(data_to_send))
	time.sleep(1.0)	# Set delay



EXPLANATION:
This script is designed to continuously publish data from a proximity sendnsor to an MQTT broker, which is a server that recieves and stores the data.
MQTT (Message Queuing Telemetry Transport) is lightweight messaging protocol that is designed for use in resource.consttrained devices and low-bandwidth networks.

The script begins by importing several libraries tthat are needed for thte script to run.

  - 'time' and 'deletetime' : These libraries provide functions for handling time-related tasks.
  - 'paho.mqtt.client' and 'paho.mqtt.publish' : These libraries provide. function for creating a client and publishing data to an MQTT broker.
  - 'board' and 'busio' : These libraries are used to interface with the hardware of the device on which the script is running.
  - 'adafruit_vcnl4010' : This library provides functions for interfacing with the proximity sensor.
  
The script then initializes the 12C bus and the proximity sensor, and sets the MQTT broker address and topic to which the sensor data will be published.
The 12C bus is a hardware bus that allows devices to communicate with each other using a set bidirectional lines for transmitting and recieving data.
The proximity sensor is used to detect the distance between sensor and an object.

Next, the script defines several functions that will be used tot handle MQTT events.
  - 'on_connect()' : This function is called when the client connects to the broker.
  - 'on_publish()' : This function is called when the client successfully publishes data to the broker.
  - 'on_disconnect()' : This function is called when the client is disconnected from the broker.
  - 'on_log()' : This function is called when thte client recieves a. log message from the broker.
  These functions are used to print messages to the console and perform other actions as needed.
  
  The script then creates an MQTT client and assigns the event handling functitons to it.
  It then connects to the MQTT broker using the 'client.connect()' function, and starts the client loop with the 'client.loop.start()' function.
  
  Finally, the script enters a loop in which it coninuously retrieves the proximity data from the sensor using the 'get_proximity()' function and publishes it to the MQTT broker using the 'client.publish()' functitton.
  The 'time.sleep()' function is used to pause the script for 1 second between each iteration of the loop, allowing the sensor data to be published at a regular interval.
  
  In summary, this script uses MQTT and a proximity sensor to continuously publish sensor data to a broker, 
  and handles various MQTT events to provide feeback and allow the script to run smoothly.
  

